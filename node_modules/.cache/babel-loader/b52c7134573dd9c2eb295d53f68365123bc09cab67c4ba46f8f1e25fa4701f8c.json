{"ast":null,"code":"var _jsxFileName = \"/Users/meganmiller/Documents/FullStack/course-work/week-4/PuppyBowlProj/src/index.js\",\n  _s2 = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { createRoot } from 'react-dom/client';\nimport PupList from \"./PupList\";\nimport SinglePup from \"./SinglePup\";\n//this is will wrap around the app so we can use it on entire application\nimport { BrowserRouter } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PuppyMain = () => {\n  _s2();\n  var _s = $RefreshSig$();\n  //set our state as empty array with variable name players\n  //setPlayers will be our function that manipulates the state of our variable players\n  const [players, setPlayers] = useState([]);\n  const [selectedPlayer, setSelectedPlayer] = useState({});\n\n  //get api info for players and assign it to our players state\n  const getPlayers = async setPlayers => {\n    _s();\n    try {\n      const response = await fetch(\"https://fsa-puppy-bowl.herokuapp.com/api/2211-FTB-ET-WEB-FT/players\");\n      const data = await response.json();\n      setPlayers(data.data.players);\n    } catch (error) {\n      console.error('oops! Trouble fetching players', error);\n    }\n    ;\n    //this is not ideal but we needed to target the specific data and we were getting back data that was too shallow\n\n    const getSinglePlayer = async (setSelectedPlayer, playerId) => {\n      try {\n        const response = await fetch(`https://fsa-puppy-bowl.herokuapp.com/api/2211-FTB-ET-WEB-FT/${playerId}`); //use variable names\n        const data = await response.json();\n        setSelectedPlayer(data.data.players);\n      } catch (error) {\n        console.error('Uh oh, trouble fetching a player!', error);\n      }\n      ;\n    };\n    useEffect(() => {\n      getPlayers(setPlayers);\n      getSinglePlayer(setSelectedPlayer);\n    }, []);\n\n    // will likely need to define one pup so that we can iterate through our array and\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"all-players-container\",\n      children: [/*#__PURE__*/_jsxDEV(PupList, {\n        players: players,\n        getSinglePlayer: getSinglePlayer\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 18\n      }, this), /*#__PURE__*/_jsxDEV(SinglePup, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 18\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this);\n  };\n  _s(getPlayers, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n};\n_s2(PuppyMain, \"MUr/+DT1xI1CC0shBFyff+NGa1k=\");\n_c = PuppyMain;\nconst appElement = document.getElementById(\"app\");\nconst root = createRoot(appElement);\nroot.render( /*#__PURE__*/_jsxDEV(PuppyMain, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 71,\n  columnNumber: 13\n}, this));\nvar _c;\n$RefreshReg$(_c, \"PuppyMain\");","map":{"version":3,"names":["React","useEffect","useState","createRoot","PupList","SinglePup","BrowserRouter","PuppyMain","players","setPlayers","selectedPlayer","setSelectedPlayer","getPlayers","response","fetch","data","json","error","console","getSinglePlayer","playerId","appElement","document","getElementById","root","render"],"sources":["/Users/meganmiller/Documents/FullStack/course-work/week-4/PuppyBowlProj/src/index.js"],"sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport {createRoot} from 'react-dom/client';\nimport PupList from \"./PupList\";\nimport SinglePup from \"./SinglePup\";\n//this is will wrap around the app so we can use it on entire application\nimport { BrowserRouter } from \"react-router-dom\";\n\n\n\nconst PuppyMain = () => {\n   \n    //set our state as empty array with variable name players\n    //setPlayers will be our function that manipulates the state of our variable players\n    const [players, setPlayers] = useState([]);\n    const [selectedPlayer, setSelectedPlayer] = useState({});\n\n\n   //get api info for players and assign it to our players state\n    const getPlayers = async (setPlayers) => {\n        try {\n            const response = await fetch (\"https://fsa-puppy-bowl.herokuapp.com/api/2211-FTB-ET-WEB-FT/players\");\n            const data = await response.json();\n            setPlayers(data.data.players);\n        } catch (error){\n        console.error('oops! Trouble fetching players', error);\n    };\n    //this is not ideal but we needed to target the specific data and we were getting back data that was too shallow\n    \n    \n\n    const getSinglePlayer = async (setSelectedPlayer, playerId) => {\n        try {\n            const response = await fetch (`https://fsa-puppy-bowl.herokuapp.com/api/2211-FTB-ET-WEB-FT/${playerId}`); //use variable names\n            const data = await response.json();\n            setSelectedPlayer(data.data.players);\n          } catch (error) {\n            console.error('Uh oh, trouble fetching a player!', error);\n    };\n  \n   \n\n    };\n     useEffect(() => {\n      getPlayers(setPlayers);\n      getSinglePlayer(setSelectedPlayer);\n    \n    }, []);\n\n\n   \n    \n\n\n    // will likely need to define one pup so that we can iterate through our array and\n    return( \n        <div id=\"all-players-container\">\n           {/* calling our component Pupcards and passing in our backpack of pupdata */}\n                {<PupList players = {players} \n                    getSinglePlayer = {getSinglePlayer}/>} \n                \n                {<SinglePup />}\n                \n         </div>);\n    \n    \n};}\n\nconst appElement = document.getElementById(\"app\");\nconst root = createRoot(appElement);\n\nroot.render(<PuppyMain />);"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,SAAS,EAAEC,QAAQ,QAAO,OAAO;AAChD,SAAQC,UAAU,QAAO,kBAAkB;AAC3C,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAOC,SAAS,MAAM,aAAa;AACnC;AACA,SAASC,aAAa,QAAQ,kBAAkB;AAAC;AAIjD,MAAMC,SAAS,GAAG,MAAM;EAAA;EAAA;EAEpB;EACA;EACA,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACQ,cAAc,EAAEC,iBAAiB,CAAC,GAAGT,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAGzD;EACC,MAAMU,UAAU,GAAG,MAAOH,UAAU,IAAK;IAAA;IACrC,IAAI;MACA,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAE,qEAAqE,CAAC;MACpG,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,EAAE;MAClCP,UAAU,CAACM,IAAI,CAACA,IAAI,CAACP,OAAO,CAAC;IACjC,CAAC,CAAC,OAAOS,KAAK,EAAC;MACfC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IAC1D;IAAC;IACD;;IAIA,MAAME,eAAe,GAAG,OAAOR,iBAAiB,EAAES,QAAQ,KAAK;MAC3D,IAAI;QACA,MAAMP,QAAQ,GAAG,MAAMC,KAAK,CAAG,+DAA8DM,QAAS,EAAC,CAAC,CAAC,CAAC;QAC1G,MAAML,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,EAAE;QAClCL,iBAAiB,CAACI,IAAI,CAACA,IAAI,CAACP,OAAO,CAAC;MACtC,CAAC,CAAC,OAAOS,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;MACjE;MAAC;IAID,CAAC;IACAhB,SAAS,CAAC,MAAM;MACfW,UAAU,CAACH,UAAU,CAAC;MACtBU,eAAe,CAACR,iBAAiB,CAAC;IAEpC,CAAC,EAAE,EAAE,CAAC;;IAON;IACA,oBACI;MAAK,EAAE,EAAC,uBAAuB;MAAA,wBAEtB,QAAC,OAAO;QAAC,OAAO,EAAIH,OAAQ;QACzB,eAAe,EAAIW;MAAgB;QAAA;QAAA;QAAA;MAAA,QAAE,eAExC,QAAC,SAAS;QAAA;QAAA;QAAA;MAAA,QAAG;IAAA;MAAA;MAAA;MAAA;IAAA,QAEf;EAGf,CAAC;EAAC,GA/CQP,UAAU;AA+ClB,CAAC;AAAA,IAxDGL,SAAS;AAAA,KAATA,SAAS;AA0Df,MAAMc,UAAU,GAAGC,QAAQ,CAACC,cAAc,CAAC,KAAK,CAAC;AACjD,MAAMC,IAAI,GAAGrB,UAAU,CAACkB,UAAU,CAAC;AAEnCG,IAAI,CAACC,MAAM,eAAC,QAAC,SAAS;EAAA;EAAA;EAAA;AAAA,QAAG,CAAC;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}